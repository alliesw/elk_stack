HTTP methods: POST, GET, PUT, PATCH, DELETE are similar to CURD (create, update, read, delete) operations in the database. [PGPPD] create-read-update-delete
Create NEW record =>POST
read=>GET
If the record exists then update else create a new record=>PUT
update/modify=>PATCH
delete=>DELETE

POST VS PUT:
The PUT method requests that the state of the target resource be created or replaced with the state 
defined by the representation enclosed in the request message payload.
Both PUT and POST can be used for creating. 
PUT can can be used to create a resource, or overwrite an existing resource.

> PUT implies putting a resource - completely replacing whatever is available at the given URL with a different thing. By definition, a PUT is idempotent. 
Do it as many times as you like, and the result is the same. x=5 is idempotent. 
You can PUT a resource whether it previously exists, or not (eg, to Create, or to Update)!

> POST updates a resource, adds a subsidiary resource, or causes a change. A POST is not idempotent, in the way that x++ is not idempotent.

By this argument, PUT is for creating when you know the URL of the thing you will create. POST can be used to create when you know the URL of the "factory" 
or manager for the category of things you want to create.

So:

POST /expense-report

or:

PUT  /expense-report/10929

You have to ask, "what are you performing the action upon?", to distinguish what you should be using. Let's assume you're designing an API for asking questions. 
If you want to use POST, then you would do that to a list of questions. If you want to use PUT, then you would do that to a particular question.

Great, both can be used, so which one should I use in my RESTful design:

You do not need to support both PUT and POST.

Which you use is up to you. But just remember to use the right one depending on what object you are referencing in the request.

Some considerations:

- Do you name the URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.
- PUT is defined to assume idempotency, so if you PUT an object twice, it should have no additional effect. This is a nice property, so I would use PUT when possible. 
Just make sure that the PUT-idempotency actually is implemented correctly in the server.
- You can update or create a resource with PUT with the same object URL
- With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.
